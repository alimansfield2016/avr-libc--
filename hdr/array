#pragma once

#include <stdint.h>
#include <initializer_list>

namespace std
{
	template <class T, uint16_t n_elems>
	class array
	{
	public:
		typedef T value_type;
		typedef value_type *pointer;
		typedef const value_type *const_pointer;
		typedef value_type &reference;
		typedef const value_type &const_reference;
		typedef value_type *iterator;
		typedef const value_type *const_iterator;

		typedef uint16_t size_type;

	private:
		static constexpr size_type count = n_elems;
		value_type m_arr[count];

	public:
		constexpr array(const std::initializer_list<value_type> &init)
			: m_arr{init}
		{
		}
		constexpr array()
			: m_arr()
		{
		}

		constexpr iterator begin() { return &m_arr[0]; }
		constexpr iterator end() { return &m_arr[count]; }
		constexpr const_iterator begin() const { return &m_arr[0]; }
		constexpr const_iterator end() const { return &m_arr[count]; }

		constexpr const_iterator cbegin() const { return &m_arr[0]; }
		constexpr const_iterator cend() const { return &m_arr[count]; }

		constexpr size_type size() const { return count; }

		constexpr reference operator[](size_type idx) { return m_arr[idx]; }
		constexpr const_reference operator[](size_type idx) const { return m_arr[idx]; }
	};
} // namespace std
