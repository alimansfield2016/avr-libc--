#pragma once

#include <stdint.h>
#include <memory>
#include <string.h>

namespace std
{
	class string
	{
		char *m_data;
		uint16_t m_size;
		uint16_t m_capacity;

	public:
		string()
			: m_data(nullptr),
			  m_size(0),
			  m_capacity(0)
		{
		}
		string(const char *s)
			: m_data((char *)malloc(strlen(s))),
			  m_size(strlen(s)),
			  m_capacity(m_size)
		{
			uint16_t i = 0;

			do
				m_data[i++] = *s++;
			while (*s);
		}
		string(string &&mov)
			: m_data(mov.m_data),
			  m_size(mov.m_size),
			  m_capacity(mov.m_capacity)
		{
			mov.m_data = nullptr;
			mov.m_size = 0;
			mov.m_capacity = 0;
		}
		~string()
		{
			free(m_data);
		}

		inline const char *const_data() const { return m_data; }
	};

	class fixed_string
	{
		uint8_t m_len;
		uint8_t m_size;
		char *m_data;
		using allocator = std::allocator<char>;

		allocator alloc;

	public:
		fixed_string(const char *str)
			: m_len(strlen(str)),
			  m_size(m_len + 1),
			  m_data(alloc.allocate(m_size))
		{
			
			for (uint8_t idx = 0; idx < m_size; idx++)
				m_data[idx] = str[idx];
		}
		fixed_string(uint8_t len)
			: m_len(len),
			  m_size(m_len + 1),
			  m_data((char *)malloc(m_size))
		{
			for (uint8_t idx = 0; idx < m_size; idx++)
				m_data[idx] = 0;
		}

		fixed_string(const fixed_string &copy)
			: m_len(copy.m_len),
			  m_size(copy.m_size),
			  m_data((char *)malloc(m_size))
		{
			for (uint8_t idx = 0; idx < m_size; idx++)
				m_data[idx] = copy[idx];
		}

		fixed_string(fixed_string &&move)
			: m_len(move.m_len),
			  m_size(move.m_size),
			  m_data(move.m_data)
		{
			move.m_len = 0;
			move.m_size = 0;
			move.m_data = nullptr;
		}

		~fixed_string()
		{
			if (m_data)
				free(m_data);
		}

		inline char &operator[](uint8_t idx) { return m_data[idx]; }
		inline const char &operator[](uint8_t idx) const { return m_data[idx]; }

		inline const char *constData() const { return m_data; }
	};

} // namespace std
